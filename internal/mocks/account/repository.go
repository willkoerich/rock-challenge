// Code generated by mockery v2.15.0. DO NOT EDIT.

package account

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	internalaccount "github.com/willkoerich/rock-challenge/internal/account"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// GetAll provides a mock function with given fields: ctx
func (_m *Repository) GetAll(ctx context.Context) ([]internalaccount.Account, error) {
	ret := _m.Called(ctx)

	var r0 []internalaccount.Account
	if rf, ok := ret.Get(0).(func(context.Context) []internalaccount.Account); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]internalaccount.Account)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByCPF provides a mock function with given fields: ctx, cpf
func (_m *Repository) GetByCPF(ctx context.Context, cpf string) (internalaccount.Account, error) {
	ret := _m.Called(ctx, cpf)

	var r0 internalaccount.Account
	if rf, ok := ret.Get(0).(func(context.Context, string) internalaccount.Account); ok {
		r0 = rf(ctx, cpf)
	} else {
		r0 = ret.Get(0).(internalaccount.Account)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, cpf)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *Repository) GetByID(ctx context.Context, id int) (internalaccount.Account, error) {
	ret := _m.Called(ctx, id)

	var r0 internalaccount.Account
	if rf, ok := ret.Get(0).(func(context.Context, int) internalaccount.Account); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(internalaccount.Account)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: ctx, account
func (_m *Repository) Save(ctx context.Context, account internalaccount.Account) (internalaccount.Account, error) {
	ret := _m.Called(ctx, account)

	var r0 internalaccount.Account
	if rf, ok := ret.Get(0).(func(context.Context, internalaccount.Account) internalaccount.Account); ok {
		r0 = rf(ctx, account)
	} else {
		r0 = ret.Get(0).(internalaccount.Account)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, internalaccount.Account) error); ok {
		r1 = rf(ctx, account)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepository(t mockConstructorTestingTNewRepository) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
