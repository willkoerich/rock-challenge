// Code generated by mockery v2.15.0. DO NOT EDIT.

package domain

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	internaldomain "github.com/willkoerich/rock-challenge/internal/domain"
)

// AccountRepository is an autogenerated mock type for the AccountRepository type
type AccountRepository struct {
	mock.Mock
}

// GetAll provides a mock function with given fields: ctx
func (_m *AccountRepository) GetAll(ctx context.Context) ([]internaldomain.Account, error) {
	ret := _m.Called(ctx)

	var r0 []internaldomain.Account
	if rf, ok := ret.Get(0).(func(context.Context) []internaldomain.Account); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]internaldomain.Account)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByCPF provides a mock function with given fields: ctx, cpf
func (_m *AccountRepository) GetByCPF(ctx context.Context, cpf string) (internaldomain.Account, error) {
	ret := _m.Called(ctx, cpf)

	var r0 internaldomain.Account
	if rf, ok := ret.Get(0).(func(context.Context, string) internaldomain.Account); ok {
		r0 = rf(ctx, cpf)
	} else {
		r0 = ret.Get(0).(internaldomain.Account)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, cpf)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *AccountRepository) GetByID(ctx context.Context, id int) (internaldomain.Account, error) {
	ret := _m.Called(ctx, id)

	var r0 internaldomain.Account
	if rf, ok := ret.Get(0).(func(context.Context, int) internaldomain.Account); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(internaldomain.Account)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: ctx, account
func (_m *AccountRepository) Save(ctx context.Context, account internaldomain.Account) (internaldomain.Account, error) {
	ret := _m.Called(ctx, account)

	var r0 internaldomain.Account
	if rf, ok := ret.Get(0).(func(context.Context, internaldomain.Account) internaldomain.Account); ok {
		r0 = rf(ctx, account)
	} else {
		r0 = ret.Get(0).(internaldomain.Account)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, internaldomain.Account) error); ok {
		r1 = rf(ctx, account)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, account
func (_m *AccountRepository) Update(ctx context.Context, account internaldomain.Account) error {
	ret := _m.Called(ctx, account)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, internaldomain.Account) error); ok {
		r0 = rf(ctx, account)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewAccountRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewAccountRepository creates a new instance of AccountRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAccountRepository(t mockConstructorTestingTNewAccountRepository) *AccountRepository {
	mock := &AccountRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
