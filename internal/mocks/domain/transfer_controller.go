// Code generated by mockery v2.15.0. DO NOT EDIT.

package domain

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	internaldomain "github.com/willkoerich/rock-challenge/internal/domain"
)

// TransferController is an autogenerated mock type for the TransferController type
type TransferController struct {
	mock.Mock
}

// GetAll provides a mock function with given fields: ctx
func (_m *TransferController) GetAll(ctx context.Context) ([]internaldomain.Transfer, error) {
	ret := _m.Called(ctx)

	var r0 []internaldomain.Transfer
	if rf, ok := ret.Get(0).(func(context.Context) []internaldomain.Transfer); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]internaldomain.Transfer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Process provides a mock function with given fields: _a0, transfer
func (_m *TransferController) Process(_a0 context.Context, transfer internaldomain.Transfer) (internaldomain.Transfer, error) {
	ret := _m.Called(_a0, transfer)

	var r0 internaldomain.Transfer
	if rf, ok := ret.Get(0).(func(context.Context, internaldomain.Transfer) internaldomain.Transfer); ok {
		r0 = rf(_a0, transfer)
	} else {
		r0 = ret.Get(0).(internaldomain.Transfer)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, internaldomain.Transfer) error); ok {
		r1 = rf(_a0, transfer)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewTransferController interface {
	mock.TestingT
	Cleanup(func())
}

// NewTransferController creates a new instance of TransferController. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTransferController(t mockConstructorTestingTNewTransferController) *TransferController {
	mock := &TransferController{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
