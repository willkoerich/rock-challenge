// Code generated by mockery v2.15.0. DO NOT EDIT.

package database

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	plataformdatabase "github.com/willkoerich/rock-challenge/internal/plataform/database"
)

// Driver is an autogenerated mock type for the Driver type
type Driver struct {
	mock.Mock
}

// ExecuteInsertCommand provides a mock function with given fields: ctx, command, args
func (_m *Driver) ExecuteInsertCommand(ctx context.Context, command string, args ...interface{}) (int, error) {
	var _ca []interface{}
	_ca = append(_ca, ctx, command)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) int); ok {
		r0 = rf(ctx, command, args...)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, ...interface{}) error); ok {
		r1 = rf(ctx, command, args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExecuteQueryElementSetCommand provides a mock function with given fields: ctx, command, args
func (_m *Driver) ExecuteQueryElementSetCommand(ctx context.Context, command string, args ...interface{}) (plataformdatabase.Results, error) {
	var _ca []interface{}
	_ca = append(_ca, ctx, command)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 plataformdatabase.Results
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) plataformdatabase.Results); ok {
		r0 = rf(ctx, command, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(plataformdatabase.Results)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, ...interface{}) error); ok {
		r1 = rf(ctx, command, args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExecuteQuerySingleElementCommand provides a mock function with given fields: ctx, command, args
func (_m *Driver) ExecuteQuerySingleElementCommand(ctx context.Context, command string, args ...interface{}) plataformdatabase.Result {
	var _ca []interface{}
	_ca = append(_ca, ctx, command)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 plataformdatabase.Result
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) plataformdatabase.Result); ok {
		r0 = rf(ctx, command, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(plataformdatabase.Result)
		}
	}

	return r0
}

type mockConstructorTestingTNewDriver interface {
	mock.TestingT
	Cleanup(func())
}

// NewDriver creates a new instance of Driver. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDriver(t mockConstructorTestingTNewDriver) *Driver {
	mock := &Driver{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
